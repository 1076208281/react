webpackJsonp([0x8da88236ed00],{"./node_modules/json-loader/index.js!./.cache/json/contributing-implementation-notes-html.json":function(n,s){n.exports={data:{markdownRemark:{html:'<p>这部分来源于完成栈识别算法的笔记。它是一份技术文档并假定读者对react的公共api也包括react如何划分为核心，渲染器，识别算法有很深的理解。如果你还不熟react的<a href="https://facebook.github.io/react/contributing/codebase-overview.html">源码总览</a>，请首先阅读<a href="https://facebook.github.io/react/contributing/codebase-overview.html">源码总览</a>。</p>\n<p>栈识别算法驱动着今天所有使用react构建的产品。它位于<a href="http://wwww.github.com/facebook/react/src/renderers/shared/reconciler">src/renderers/shared/reconciler</a>被React DOM和 React Native使用。</p>\n<h2 id="视频：从零开始构建react"><a href="#%E8%A7%86%E9%A2%91%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%9E%84%E5%BB%BAreact" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>视频：从零开始构建React</h2>\n<p> <a href="https://www.twitter.com/zpao">Paul O’Shannessy</a>关于<a href="https://www.youtube.com/watch?v=_MAD4Oly9yg">如何从零构建react框架</a>的演讲激发了写这篇文档的动力。</p>\n<p> 这篇文档和他的演讲简化了真实react的代码库，因此你也许通过熟悉他们两者，可以更好的理解react代码库。</p>\n<h2 id="总览"><a href="#%E6%80%BB%E8%A7%88" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>总览</h2>\n<p>这个识别算法并没有公共的API.渲染器像React DOM和React Native使用它有效地更新用户使用react构建的用户界面。</p>\n<h2 id="递归装载"><a href="#%E9%80%92%E5%BD%92%E8%A3%85%E8%BD%BD" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>递归装载</h2>\n<p>让我们思考你第一次装载一个组件:</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> rootEl<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>React DOM将传递App给识别算法。 记得App是一个React元素，是一个你要渲染什么的描述,你可以认为它是一个原生对象。</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment" spellcheck="true">// { type: App, props: {} }</span>\n</code></pre>\n      </div>\n<p>这个识别算法将检查App是否是一个类或者是一个函数。如果App是一个函数，这个识别算法将调用<code>App(props)</code>返回React元素。如果App是一个类，这个识别算法将通过<code>new App(props)</code>实例化一个App，然后调用componentWillMount生命周期方法。</p>\n<p>换句话说，这个识别算法将了解这个元素App将渲染什么。</p>\n<p>这个步骤是递归的。App也许渲染一个Greeting组件，Greeting组件也许渲染一个Button组件，等等。这个识别算法将从上之下逐个递归每个用户定义的组件，了解每个组件将渲染什么。</p>\n<p>你可以用一下的伪代码思考这个过程：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code><span class="token keyword">function</span> <span class="token function">isClass</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">（Boolean</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>isReactComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment" spellcheck="true">// 这个函数将传入一个React Element（如&lt;App/>),并且返回一个DOM或者Native节点代表一个已装载的树</span>\n<span class="token keyword">function</span> <span class="token function">mount</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> type <span class="token operator">=</span> element<span class="token punctuation">.</span>type<span class="token punctuation">;</span>\n  <span class="token keyword">var</span> props <span class="token operator">=</span> element<span class="token punctuation">.</span>props<span class="token punctuation">;</span>\n\n  <span class="token comment" spellcheck="true">// 通过识别这个type，调用函数或者调用类创造一个实例，并执行render方法，产生这个待渲染的元素。</span>\n  <span class="token keyword">var</span> renderedElement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isClass</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment" spellcheck="true">// 组件类</span>\n    <span class="token keyword">var</span> publicInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">type</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment" spellcheck="true">// 设置其属性</span>\n    publicInstance<span class="token punctuation">.</span>props <span class="token operator">=</span> props<span class="token punctuation">;</span>\n    <span class="token comment" spellcheck="true">//调用必要的声明周期方法</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>publicInstance<span class="token punctuation">.</span>componentWillMount<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      publicInstance<span class="token punctuation">.</span><span class="token function">componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment" spellcheck="true">// 通过调用render方法得到待渲染的元素</span>\n    renderedElement <span class="token operator">=</span> publicInstance<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token comment" spellcheck="true">// 无状态组件</span>\n    renderedElement <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment" spellcheck="true">// 这个步骤是递归的，因为一个组件也许返回另一个包含组件的react元素</span>\n  <span class="token keyword">return</span> <span class="token function">mount</span><span class="token punctuation">(</span>renderedElement<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment" spellcheck="true">// 注意：这不是全部完成并且这个递归是无限递归的，不能终止。它仅可以处理像&lt;App/>和&lt;Button/>这样的自定义元素</span>\n  <span class="token comment" spellcheck="true">// 它还尚不能处理像&lt;div/>或者&lt;/p>这样的宿主元素</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> rootEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'root\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> node <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span><span class="token punctuation">/></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nrootEl<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p><strong>注意</strong>: 这确实是伪代码。它和真实的完成并不相似。它将导致栈溢出，因为我们还没有讨论如何停止这个递归。</p>\n<p>让我们回顾下上面这个例子中的一些关键想法：</p>\n<ol>\n<li>React Elements是一个普通对象，表示组件的类型(如App)以及组件的一些属性。</li>\n<li>用户定义的组件（如App)可能是一个类或者是函数，但是他们都返回React elements</li>\n<li>装载是一个递归的过程，在这个过程中，react将使用顶级React元素创造一颗DOM或者Native树</li>\n</ol>\n<h2 id="装载宿主元素"><a href="#%E8%A3%85%E8%BD%BD%E5%AE%BF%E4%B8%BB%E5%85%83%E7%B4%A0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>装载宿主元素</h2>\n<p>如果我们不渲染任何东西到屏幕上，那么这个步骤将是无用的。</p>\n<p>除了用户定义的组合组件，React Elements也可以表示特定平台（“宿主”）组件。例如，Button可以从它的render方法返回一个div。</p>\n<p>如果元素的type属性是一个字符串，我们就把它当宿主元素来处理：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">/></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment" spellcheck="true">// {type: \'div\', props: {}}</span>\n<span class="token template-string"><span class="token string">``</span></span><span class="token template-string"><span class="token string">` \n\n宿主元素里不包含用户定义的代码。\n\n当识别算法遇到一个宿主元素时，它让渲染器负责装载它。例如，React DOM将创建一个DOM节点。元素如果有子元素，识别算法像按照上班同样的算法依次装载他们。\n\n它并不关心子元素是宿主元素（如div,hr)还是用户定义的组合元素(如Button)。依次递归，通过父节点插入子组件产生DOM节点，形成整个完整DOM结构。\n\n**注意**:\n\n这个识别算法自身并不只是服务于DOM.装载过程的额外结果（在源代码中有时成为装载影像)依赖于渲染器。可能是一个DOM节点，也可能一个字符串（React DOM server）,或者在React Native中是一系列数字代表Native 视图。\n\n我们扩展上面的代码以处理宿主元素，代码如下：\n\n`</span></span><span class="token template-string"><span class="token string">``</span></span>javascript\n<span class="token keyword">function</span> <span class="token function">isClass</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment" spellcheck="true">// React.Component这个父类有这个标志。</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token function">Boolean</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> \n    <span class="token function">Boolean</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>isReactComponent<span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment" spellcheck="true">// 这个函数将仅处理组合类型的元素，比如，它处理&lt;App/>和&lt;Button/>,但不处理&lt;div/></span>\n<span class="token punctuation">}</span>\n\n<span class="token comment" spellcheck="true">// 这个函数将传入一个React Element（如&lt;App/>),并且返回一个DOM或者Native节点代表一个已装载的树</span>\n<span class="token keyword">function</span> <span class="token function">mountComposite</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> type <span class="token operator">=</span> element<span class="token punctuation">.</span>type<span class="token punctuation">;</span>\n  <span class="token keyword">var</span> props <span class="token operator">=</span> element<span class="token punctuation">.</span>props<span class="token punctuation">;</span>\n\n  <span class="token comment" spellcheck="true">// 通过识别这个type，调用函数或者调用类创造一个实例，并执行render方法，产生这个待渲染的元素。</span>\n  <span class="token keyword">var</span> renderedElement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isClass</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment" spellcheck="true">// 组件类</span>\n    <span class="token keyword">var</span> publicInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">type</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment" spellcheck="true">// 设置其属性</span>\n    publicInstance<span class="token punctuation">.</span>props <span class="token operator">=</span> props<span class="token punctuation">;</span>\n    <span class="token comment" spellcheck="true">//调用必要的声明周期方法</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>publicInstance<span class="token punctuation">.</span>componentWillMount<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      publicInstance<span class="token punctuation">.</span><span class="token function">componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment" spellcheck="true">// 通过调用render方法得到待渲染的元素</span>\n    renderedElement <span class="token operator">=</span> publicInstance<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> type <span class="token operator">===</span> <span class="token string">\'function\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment" spellcheck="true">// 无状态组件</span>\n    renderedElement <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token function">mount</span><span class="token punctuation">(</span>renderedElement<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment" spellcheck="true">// 这个函数仅处理宿主类型元素</span>\n<span class="token comment" spellcheck="true">// 例如，它处理&lt;div/>和&lt;p/>,但不是&lt;App/></span>\n<span class="token keyword">function</span> <span class="token function">mountHost</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> type <span class="token operator">=</span> element<span class="token punctuation">.</span>type<span class="token punctuation">;</span>\n  <span class="token keyword">var</span> props <span class="token operator">=</span> element<span class="token punctuation">.</span>props<span class="token punctuation">;</span>\n  <span class="token keyword">var</span> children <span class="token operator">=</span> props<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    children <span class="token operator">=</span> <span class="token punctuation">[</span>children<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  children <span class="token operator">=</span> children<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment" spellcheck="true">// 这部分应该不在这个识别算法中。</span>\n  <span class="token comment" spellcheck="true">// 不同的渲染器应该初始化不同的节点</span>\n  <span class="token comment" spellcheck="true">// 例如，React Native将创建ios或者android视图。</span>\n  <span class="token keyword">var</span> node <span class="token operator">=</span> docuemnt<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>propName <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>propName <span class="token operator">!==</span> <span class="token string">\'children\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      node<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>propName<span class="token punctuation">,</span>props<span class="token punctuation">[</span>propName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment" spellcheck="true">// 装载子元素</span>\n  children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>childElement <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> childNode <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>childElement<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    node<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>childNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> node<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">mount</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> type <span class="token operator">=</span> element<span class="token punctuation">.</span>type<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> type <span class="token operator">===</span> <span class="token string">\'function\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">mountComposite</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> type <span class="token operator">===</span> <span class="token string">\'string\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">mountHost</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> rootEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElemnetById</span><span class="token punctuation">(</span><span class="token string">\'root\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span>  node <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span><span class="token punctuation">/></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nrootEl<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>上边的代码可以运行，但是离真实的识别算法完成还很远，关键缺乏的特征是不支持更新。</p>\n<h2 id="内部实例介绍"><a href="#%E5%86%85%E9%83%A8%E5%AE%9E%E4%BE%8B%E4%BB%8B%E7%BB%8D" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>内部实例介绍</h2>\n<p>React框架的核心特点是你可以重用一切并且不需要重建dom或者重置状态。</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> rootEl<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment" spellcheck="true">// 应该重用之前的DOM</span>\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> rootEl<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>然而，我们上面完成的代码仅仅只知道如何装载初始化树。它不可以执行更新,因为它不储存所有必要的信息，例如所有的实例，或者那个DOM节点对应那个组件。</p>\n<p>栈识别算法代码库通过在一个类中编写mount方法来解决这个问题。这种方法有许多缺点并且当前我们正在努力地重写这个识别算法。</p>\n<p>我们将创造两个类：DOMComponent和CompositeComponent，而不是创造mountHost和mountComponent两个函数。</p>\n<p>这两个类都有一个接受元素的构造函数，其mount方法将返回已装载的节点。 我们将用一个对应类实例化的一个工厂函数取代mount方法。</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code><span class="token keyword">function</span> <span class="token function">instantiateComponent</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> type <span class="token operator">=</span> element<span class="token punctuation">.</span>type<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> type <span class="token operator">===</span> <span class="token string">\'function\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment" spellcheck="true">// User-defined components</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CompositeComponent</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> type <span class="token operator">===</span> <span class="token string">\'string\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment" spellcheck="true">// Platform-specific components</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DOMComponent</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>  \n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>首先，让我们思考CompositeComponentd的完成：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code><span class="token keyword">function</span> <span class="token function">isClass</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>isReactComponent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">instantiateComponent</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> <span class="token punctuation">{</span>type<span class="token punctuation">}</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> type <span class="token operator">===</span> <span class="token string">\'function\'</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CompositeComponent</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> type <span class="token operator">===</span> <span class="token string">\'string\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DOMComponent</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">CompositeComponent</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>currentElement <span class="token operator">=</span> element<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>renderedComponent <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>publiceInstance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">getPubliceInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>publiceInstance<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> currentElement <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currentElement<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> type <span class="token operator">=</span> currentElement<span class="token punctuation">.</span>type<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> props <span class="token operator">=</span> currentElement<span class="token punctuation">.</span>props<span class="token punctuation">;</span>\n\n    <span class="token comment" spellcheck="true">// 通过识别这个type，调用函数或者调用类创造一个实例，并执行render方法，产生这个待渲染的元素。</span>\n    <span class="token keyword">let</span> renderedElement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> publicInstance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> renderedComponent <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isClass</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment" spellcheck="true">// 组件类</span>\n      publicInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">type</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment" spellcheck="true">// 设置其属性</span>\n      publicInstance<span class="token punctuation">.</span>props <span class="token operator">=</span> props<span class="token punctuation">;</span>\n      <span class="token comment" spellcheck="true">//调用必要的声明周期方法</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>publicInstance<span class="token punctuation">.</span>componentWillMount<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        publicInstance<span class="token punctuation">.</span><span class="token function">componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token comment" spellcheck="true">// 通过调用render方法得到待渲染的元素</span>\n      renderedElement <span class="token operator">=</span> publicInstance<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> type <span class="token operator">===</span> <span class="token string">\'function\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment" spellcheck="true">// 无状态组件</span>\n      publiceInstance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n      renderedElement <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>publicInstance <span class="token operator">=</span> publicInstance<span class="token punctuation">;</span>\n    renderedComponent <span class="token operator">=</span> <span class="token function">instantiateComponent</span><span class="token punctuation">(</span>renderedElement<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>renderedComponent <span class="token operator">=</span>  renderedComponent<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> renderedComponent<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span>renderedElement<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>这和之前mountComposite完成没有太多的区别，但是现在我们可以保存一些信息，比如当前元素，当前已渲染返回的组件，以及当前的组件实例用于更新使用。</p>\n<p>注意 CompositeComponent的实例和用户定义的类实例不是一回事。CompositeComponent是我们识别算法的一部分，并且从来不暴露给用户。</p>\n<p>我们使用这个类通过元素类型来读取用户自定义的类，并且创造它的实例。为了避免困惑，我们把CompositeComponent和DOMComponent的实例称为”内部实例”。</p>\n<p>他们存在是为了我们可以关联一些持久数据给他们。只有渲染器和识别算法能够意识到他们的存在。与此相类似，我们叫用户定义的类实例叫”公开实例”。</p>\n<p>这个公开实例是你在render方法和其他自定义组件方法中作为this使用的。</p>\n<p>这个mountHost函数，重构成DOMComponent的mount方法，看上去相似：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code><span class="token keyword">class</span> <span class="token class-name">DOMComponent</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>currentElement <span class="token operator">=</span> element<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>renderedChildren <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>node <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">getPublicInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> element <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currentElement<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> type <span class="token operator">=</span> element<span class="token punctuation">.</span>type<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> props <span class="token operator">=</span> element<span class="token punctuation">.</span>props<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> children <span class="token operator">=</span> props<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      children <span class="token operator">=</span> <span class="token punctuation">[</span>children<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">let</span> node <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>node <span class="token operator">=</span> node<span class="token punctuation">;</span>\n    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>propName <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>propName <span class="token operator">!=</span> <span class="token string">\'children\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        node<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>propName<span class="token punctuation">,</span>props<span class="token punctuation">[</span>propName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> renderedChild <span class="token operator">=</span> children<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>instantiateComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>renderedChild <span class="token operator">=</span> renderedChild<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> childNodes <span class="token operator">=</span> renderedChild<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>child <span class="token operator">=></span> child<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    childNodes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>childN <span class="token operator">=></span> <span class="token punctuation">{</span>\n      node<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>childN<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> node<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>重构mountHost函数之后的主要区别是我们保持this.node和this.renderedChildren和内部DOM Component实例保持关联。我们未来将使用它们进行无痕更新。最后，无论组合还是宿主的内部实例，现在都可以指向它的子内部实例。如果一个App组件渲染一个Button类并且Button类渲染一个div，内部实例树将像下边这样：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code><span class="token punctuation">[</span>object CompositeComponent<span class="token punctuation">]</span> <span class="token punctuation">{</span>\n  currentElement<span class="token punctuation">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>\n  publicInstance<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n  renderedComponent<span class="token punctuation">:</span> <span class="token punctuation">[</span>object CompositeComponent<span class="token punctuation">]</span> <span class="token punctuation">{</span>\n    currentElement<span class="token punctuation">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>\n    publicInstance<span class="token punctuation">:</span> <span class="token punctuation">[</span>object Button<span class="token punctuation">]</span><span class="token punctuation">,</span>\n    renderedComponent<span class="token punctuation">:</span> <span class="token punctuation">[</span>object DOMComponent<span class="token punctuation">]</span> <span class="token punctuation">{</span>\n      currentElement<span class="token punctuation">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>\n      node<span class="token punctuation">:</span> <span class="token punctuation">[</span>object HTMLDivElement<span class="token punctuation">]</span><span class="token punctuation">,</span>\n      renderedChildren<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>这个内部实例树包含复合类型和宿主类型内部实例。在DOM结构里你将仅看到<code>&#x3C;div></code>\n这个composite内部实例包含以下内容：</p>\n<ul>\n<li>当前元素</li>\n<li>元素类型是个类的公开实例</li>\n<li>单个待渲染的内部实例。它可能是一个DOMComponent，也可能是CompositeComponent</li>\n</ul>\n<p>宿主的内部实例需要储存以下信息：</p>\n<ul>\n<li>当前元素</li>\n<li>对应的DOM节点</li>\n<li>所有的子内部实例。他们既可能是一个DOMComponent也可能是一个CompositeComponent</li>\n</ul>\n<p>如果你正在努力想想内部复杂程序中内部实例树是什么样子。<a href="https://github.com/facebook/react-devtools">React开发者工具</a>可以给你一个直观的印象。它使用灰色高亮宿主实例，使用紫色高亮复合实例。</p>\n<p><img src="https://facebook.github.io/react/img/docs/implementation-notes-tree.png" alt="implementation-notes-tree"></p>\n<p>为了完成这次重构，我们将介绍一个函数像ReactDOM.render()来负责装载完整的树到一个容器节点。它也像 <code>ReactDOM.render()</code> 一样返回一个公开实例。</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code><span class="token keyword">function</span> <span class="token function">mountTree</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>containerNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> rootComponent <span class="token operator">=</span> <span class="token function">instantiateComponent</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> rootNode <span class="token operator">=</span> rootComponent<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  containerNode<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>rootNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> publicInstance <span class="token operator">=</span> rootComponent<span class="token punctuation">.</span><span class="token function">getPublicInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> publicInstance<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> root <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'root\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">mountTree</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span><span class="token punctuation">/></span></span><span class="token punctuation">,</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<h2 id="卸载"><a href="#%E5%8D%B8%E8%BD%BD" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>卸载</h2>\n<p>现在我们有了可以联系他们孩子和DOM节点的内部实例，我们可以用他们完成卸载。\n对于一个复合组件，调用生命周期方法递归卸载。</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code><span class="token keyword">class</span> <span class="token class-name">CompositeComponent</span> <span class="token punctuation">{</span>\n  <span class="token function">unmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> publicInstance <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>publicInstance<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>publicInstance <span class="token operator">&amp;&amp;</span> publicInstance<span class="token punctuation">.</span>componentWillUnmount<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      publicInstance<span class="token punctuation">.</span><span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">var</span> renderedComponent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>renderedComponent<span class="token punctuation">;</span>\n    renderedComponent<span class="token punctuation">.</span><span class="token function">unmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>对于DOMComponent，卸载时会告诉每个子元素卸载:</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code><span class="token keyword">class</span> <span class="token class-name">DOMComponent</span> <span class="token punctuation">{</span>\n  <span class="token function">unmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> renderedChild <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>renderedChild<span class="token punctuation">;</span>\n    renderedChild<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>child <span class="token operator">=></span> child<span class="token punctuation">.</span><span class="token function">unmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>实际上，卸载DOM组件也需要移除事件监听器和清除一些缓存，但是我们将跳过这些细节。\n我们可以增加一个一级函数叫 <code>unmountTree(containerNode)</code>，这个函数和 <code>ReactDOM.unmountComponentAtNode()</code> 类似。</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code><span class="token keyword">function</span> <span class="token function">unmountTree</span><span class="token punctuation">(</span>containerNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> childNode <span class="token operator">=</span> containerNode<span class="token punctuation">.</span>firstChild<span class="token punctuation">;</span>\n  <span class="token keyword">var</span> rootComponent <span class="token operator">=</span> childNode<span class="token punctuation">.</span>_internalInstance<span class="token punctuation">;</span>\n  rootComponent<span class="token punctuation">.</span><span class="token function">unmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  containerNode<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>为了让上面的代码工作，我们需要从DOM节点中读取一个内部根实例。我们将修改mountTree()增加一个 <code>_internalInstance</code> 属性给根DOM节点。为了让 <code>mountTree</code> 可以被调用多次，我们也让 <code>mountTree</code> 来销毁已存在的DOM树。</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code><span class="token keyword">function</span> <span class="token function">mountTree</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>containerNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>containerNode<span class="token punctuation">.</span>firstChild<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">unmountTree</span><span class="token punctuation">(</span>containerNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">var</span> rootComponent <span class="token operator">=</span> <span class="token function">instantiateComponent</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> rootNode <span class="token operator">=</span> rootComponent<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  rootNode<span class="token punctuation">.</span>_internalInstance <span class="token operator">=</span> rootComponent<span class="token punctuation">;</span>\n  containerNode<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>rootNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> publicInstance <span class="token operator">=</span> rootComponent<span class="token punctuation">.</span><span class="token function">getPublicInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> publicInstance<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>现在重复运行 <code>unmountTree()</code> 或者运行 <code>mountTree()</code> 移除旧的dom树，运行 <code>componentWillUnmount()</code> 生命周期钩子在组件上。</p>\n<h2 id="更新"><a href="#%E6%9B%B4%E6%96%B0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>更新</h2>\n<p>在前面章节，我们完成了卸载。然而如果当任何属性改变就重新卸载和插入整个DOM树，那么 React 并没有太大的实用性。识别算法的目标是重用已存在的实例，这些实例保留对应的DOM节点和状态。</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code><span class="token keyword">var</span> rootEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'root\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">mountTree</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> rootEl<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment" spellcheck="true">// 应该重用已存在的DOM树</span>\n<span class="token function">mountTree</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> rootEl<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p> 我们将增加一个或多个方法来扩展内部实例。除了增加 <code>mount</code> 和 <code>unmount</code> 方法外,<code>DOMComponent</code> 和 <code>CompositeComponent</code> 将完成一个叫 <code>receive(nextElement)</code> 的方法。</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code> <span class="token keyword">class</span> <span class="token class-name">CompositeComponent</span> <span class="token punctuation">{</span>\n  <span class="token comment" spellcheck="true">// ...</span>\n\n  <span class="token function">receive</span><span class="token punctuation">(</span>nextElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment" spellcheck="true">// ...</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">DOMComponent</span> <span class="token punctuation">{</span>\n  <span class="token comment" spellcheck="true">// ...</span>\n\n  <span class="token function">receive</span><span class="token punctuation">(</span>nextElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment" spellcheck="true">// ...</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>这个函数的职责是将 <code>nextElement</code> 提供的最新描述给组件或者它的子组件。这部分经常被描述为”虚拟DOM更新”。尽管实际上发生的是我们经常说的内部实例树的递归，同时每个实例树都接受一个更新。</p>\n<h2 id="更新复合组件"><a href="#%E6%9B%B4%E6%96%B0%E5%A4%8D%E5%90%88%E7%BB%84%E4%BB%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>更新复合组件</h2>\n<p>当一个复合组件接受一个新元素时，我们运行 <code>componentWillUpdate</code> 这个生命周期钩子。</p>\n<p>然后我们将用新的属性重新渲染组件并且得到新一个已渲染的元素：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code><span class="token keyword">class</span> <span class="token class-name">CompositeComponent</span> <span class="token punctuation">{</span>\n  <span class="token function">receive</span><span class="token punctuation">(</span>nextElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> prevProps <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currentElement<span class="token punctuation">.</span>props<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> publicInstance <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>publicInstance<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> prevRenderedComponent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>renderedComponent<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> prevRenderedElement <span class="token operator">=</span> prevRenderedComponent<span class="token punctuation">.</span>currentElement<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>currentElement <span class="token operator">=</span> nextElement<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> type <span class="token operator">=</span> nextElement<span class="token punctuation">.</span>type<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> nextProps <span class="token operator">=</span> nextElement<span class="token punctuation">.</span>props<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> renderedElement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isClass</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      publicInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">type</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>publicInstance<span class="token punctuation">.</span>componentWillUpdate<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        publicInstance<span class="token punctuation">.</span><span class="token function">componentWillUpdate</span><span class="token punctuation">(</span>prevProps<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      publicInstance<span class="token punctuation">.</span>props <span class="token operator">=</span> nextProps<span class="token punctuation">;</span>\n      nextRenderedElement <span class="token operator">=</span> publicInstance<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> type <span class="token operator">==</span><span class="token string">\'function\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      nextRenderedElement <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>prevRenderedElement<span class="token punctuation">.</span>type <span class="token operator">==</span> nextRenderedElement<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      prevRenderedComponent<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>nextRenderedElement<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>接下来，我们看下一渲染元素的类型。如果这个类型从上次渲染至今都没改变过，那么组件接下来就可以保持自身更新，而不是完全替换。</p>\n<p>例如，如果你第一次返回的是 <code>&#x3C;Button color="red" /></code> 并且第二次返回的是 <code>&#x3C;Button color="blue" /></code> ，\n我们仅可以告诉对应的内部实例通过receive方法来接受下个元素。</p>\n<p>然而，如果下一个已渲染的元素和之前已渲染的元素有不同的type，我们不能更新内部实例。一个 <code>&#x3C;button></code> 不可能”变成”一个 <code>&#x3C;input></code> 。相反，我们必须卸载已存在的内部实例同时按照已渲染元素类型对应装载一个新的内部实例。\n例如，这种情况发生在当一个 <code>&#x3C;button></code> 要渲染成 <code>&#x3C;input></code></p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n   <span class="token keyword">let</span> prevNode <span class="token operator">=</span> prevRenderedComponent<span class="token punctuation">.</span><span class="token function">getHostNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   prevRenderedComponent<span class="token punctuation">.</span><span class="token function">unmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token keyword">let</span> nextRenderedComponent <span class="token operator">=</span> <span class="token function">instantiateComponent</span><span class="token punctuation">(</span>nextRenderedElement<span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token keyword">let</span> nextNode <span class="token operator">=</span> nextRenderedComponent<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token comment" spellcheck="true">// 替换掉原来引用的子组件</span>\n   <span class="token keyword">this</span><span class="token punctuation">.</span>renderedComponent <span class="token operator">=</span> nextRenderedComponent<span class="token punctuation">;</span>\n   <span class="token comment" spellcheck="true">// 用新的节点替换到之前的节点</span>\n   <span class="token comment" spellcheck="true">// 注意这是特殊的渲染器代码，理想情况下，应该把这些代码放在复合组件之外。</span>\n   prevNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>nextNode<span class="token punctuation">,</span> prevNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>综上所述，当一个复合组件接受一个新元素时，如果新元素的类型和之前的元素类型一样，那么就直接调用自身的 <code>receive</code> 方法进行更新，否则需要卸载掉原来的内部实例，在原来的地方插入一个新的元素。</p>\n<p>还有另外一种情况，组件会重新装载而不是接受一个新元素。这种情况是元素的 key 已经已经变化的时候。因为这个文档已经很复杂了，我们不想在这已经复杂的文档中，在去讨论如何处理元素 key。</p>\n<p>为了我们可以在更新期间，锁定特定平台代码并且替换掉它，现在我们需要增加在内部实例中增加一个叫 <code>getHostNode</code> 的方法。它的完成在 <code>DOMComponent</code> 和<code>CompositeComponent</code> 中是一致的。</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code><span class="token keyword">class</span> <span class="token class-name">CompositeComponent</span> <span class="token punctuation">{</span>\n  <span class="token function">getHostNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment" spellcheck="true">// 已渲染的组件会提供它，并且递归向下钻取任何复合组件</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>renderedComponent<span class="token punctuation">.</span><span class="token function">getHostNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">DOMComponent</span> <span class="token punctuation">{</span>\n  <span class="token function">getHostNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h2 id="更新宿主组件"><a href="#%E6%9B%B4%E6%96%B0%E5%AE%BF%E4%B8%BB%E7%BB%84%E4%BB%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>更新宿主组件</h2>\n<p>宿主组件的更新方式是不同的，如 <code>DOMComponent</code>。当他们接受一个元素时，他们需要更新背后特定平台的视图。\n以React DOM为例，这意味着更新DOM节点的属性。\n然后，宿主组件需要更新他们的子节点。不像复合组件仅包含最多一个子节点。在下面这个简单的例子中，我们使用一个内部实例数组并不断迭代它。通过判断接受的元素类型和之前的元素类型是否相同来决定是更新还是取代内部实例。\n真实的识别算法也考虑元素的key并且通过它来跟踪移动实现元素的插入和删除，但是在这里我们暂时不讨论这个逻辑。</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code><span class="token keyword">class</span> <span class="token class-name">DOMComponent</span> <span class="token punctuation">{</span>\n  <span class="token function">receive</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> prevProps <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currentElement<span class="token punctuation">.</span>props<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> nextProps <span class="token operator">=</span> element<span class="token punctuation">.</span>props<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> prevChildren <span class="token operator">=</span> prevProps<span class="token punctuation">.</span>children  <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> nextChildren <span class="token operator">=</span> nextProps<span class="token punctuation">.</span>children  <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> prevRenderedChildren <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>renderedChildren<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>currentElement <span class="token operator">=</span> element<span class="token punctuation">;</span>\n    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>prevProps<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>propName <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span><span class="token punctuation">(</span>propName<span class="token operator">!=</span><span class="token string">\'children\'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>nextProps<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>propName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        node<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span>propName<span class="token punctuation">,</span>prevProps<span class="token punctuation">[</span>propName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>propName <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>propName<span class="token operator">!=</span><span class="token string">\'children\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        node<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>propName<span class="token punctuation">,</span>nextProps<span class="token punctuation">[</span>propName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>prevChildren<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      prevChildren <span class="token operator">=</span> <span class="token punctuation">[</span>prevChildren<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>nextChildren<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      nextChildren <span class="token operator">=</span> <span class="token punctuation">[</span>nextChildren<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">let</span> nextRenderedChildren <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> operationQueue  <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nextChildren<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> prevChild <span class="token operator">=</span> prevRenderedChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>prevChild<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> nextChild <span class="token operator">=</span> <span class="token function">instantiateComponent</span><span class="token punctuation">(</span>nextChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> childNode <span class="token operator">=</span> nextChild<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        operationQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>type<span class="token punctuation">:</span> <span class="token string">\'ADD\'</span><span class="token punctuation">,</span> node<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        nextRenderedChildren<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nextChild<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">continue</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">var</span> canUpdate <span class="token operator">=</span> preChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">===</span> nextChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>canUpdate<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> prevNode <span class="token operator">=</span> prevChild<span class="token punctuation">.</span>node<span class="token punctuation">;</span>\n        prevChild<span class="token punctuation">.</span><span class="token function">unmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> nextChild <span class="token operator">=</span> <span class="token function">instantiateComponent</span><span class="token punctuation">(</span>nextChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> nextNode <span class="token operator">=</span> nextChild<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        operationQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>type<span class="token punctuation">:</span> <span class="token string">\'REPLACE\'</span><span class="token punctuation">,</span>prevNode<span class="token punctuation">:</span>prevNode<span class="token punctuation">,</span>nextNode<span class="token punctuation">:</span>nextNode<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        nextRenderedChildren<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nextChild<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">continue</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      prevChild<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>nextChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      nextRenderedChildren<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>prevChild<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> nextChildren<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">&lt;</span> prevChildren<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> iprevChild <span class="token operator">=</span> prevRenderedChildren<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword">let</span> iprevNode <span class="token operator">=</span> iprevChild<span class="token punctuation">.</span>node<span class="token punctuation">;</span>\n      iprevNode<span class="token punctuation">.</span><span class="token function">unmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      operationQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>type<span class="token punctuation">:</span><span class="token string">\'REMOVE\'</span><span class="token punctuation">,</span>node<span class="token punctuation">:</span>iprevNode<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>renderedChildren <span class="token operator">=</span> nextRenderedChildren<span class="token punctuation">;</span>\n    <span class="token comment" spellcheck="true">// 最后一步，我们执行DOM操作。另外真实的识别算法也处理了移动这种情况，所以其更复杂。</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span>operationQueue<span class="token punctuation">.</span>length<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> operation <span class="token operator">=</span> operationQueue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">switch</span><span class="token punctuation">(</span>operation<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">case</span> <span class="token string">\'ADD\'</span><span class="token punctuation">:</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>operation<span class="token punctuation">.</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> <span class="token string">\'REPLACE\'</span><span class="token punctuation">:</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>operation<span class="token punctuation">.</span>prevNode<span class="token punctuation">,</span>operation<span class="token punctuation">.</span>nextNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> <span class="token string">\'REMOVE\'</span><span class="token punctuation">:</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>operation<span class="token punctuation">.</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h2 id="更新-1"><a href="#%E6%9B%B4%E6%96%B0-1" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>更新</h2>\n<p>现在包括符合组件和宿主组件都完成了receive方法，我们可以改变以及函数mountTree仅当元素类型和最后一次相同时使用</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code><span class="token keyword">function</span> <span class="token function">mountTree</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>containerNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>containerNode<span class="token punctuation">.</span>firstChild<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> prevNode <span class="token operator">=</span> containerNode<span class="token punctuation">.</span>firstChild<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> prevrootComponent <span class="token operator">=</span> prevNode<span class="token punctuation">.</span>_internalInstance<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> prevElement <span class="token operator">=</span> prevrootComponent<span class="token punctuation">.</span>currentElement<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>prevElement<span class="token punctuation">.</span>type <span class="token operator">==</span> element<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      prevrootComponent<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">unmountTree</span><span class="token punctuation">(</span>containerNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">let</span> rootComponent <span class="token operator">=</span> <span class="token function">instantiateComponent</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> rootNode <span class="token operator">=</span> rootComponent<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> publicInstance <span class="token operator">=</span> rootComponent<span class="token punctuation">.</span><span class="token function">getPublicInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  rootNode<span class="token punctuation">.</span>_internalInstance <span class="token operator">=</span> rootComponent<span class="token punctuation">;</span>\n  containerNode<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>rootNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> publicInstance<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>现在我们使用同样的type调用mountTree两次，第二次直接重用了第一次。</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code><span class="token keyword">let</span> rootEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'root\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">mountTree</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span><span class="token punctuation">/></span></span><span class="token punctuation">,</span>rootEl<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">mountTree</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span><span class="token punctuation">/></span></span><span class="token punctuation">,</span>rootEl<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>这些基本展现了react内部是如何运作的。</p>\n<h2 id="我们还没有提什么"><a href="#%E6%88%91%E4%BB%AC%E8%BF%98%E6%B2%A1%E6%9C%89%E6%8F%90%E4%BB%80%E4%B9%88" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>我们还没有提什么</h2>\n<p>这份文档简化了真实的代码库。有一些方面很重要，但是我们并没有提及：</p>\n<ul>\n<li>\n<p>组件可以渲染null,并且识别算法可以处理数组中空的字符并且能够渲染输出结果。</p>\n</li>\n<li>\n<p>这种识别算法也从元素中读取key并且使用它可以和数组中的元素对应起来，来实现元素的移动。关于这部分真实的React代码完成是很复杂的。</p>\n</li>\n<li>\n<p>渲染器使用<a href="https://facebook.github.io/react/contributing/codebase-overview.html#dynamic-injection">依赖注入</a>传宿主内部实例给识别算法。例如，React DOM告诉识别算法使用ReactDOMComponent作为宿主内部实例的完成。</p>\n</li>\n<li>\n<p>更新子节点列表的逻辑被抽出到一个叫ReactMutiChild的方法集中，被React DOM和React Native使用。</p>\n</li>\n<li>\n<p>识别算法也完成了在复合组件中进行状态操作。在事件监听器中的多次更新都会被放到一次更新中。</p>\n</li>\n<li>\n<p>识别算法也负责增加和移除refs给复合组件和宿主节点。</p>\n</li>\n<li>\n<p>在DOM就绪后如componentDidMount和componentDidUpdate声明周期钩子就会被增加到回调序列中，在一次批处理中被全部执行。</p>\n</li>\n<li>\n<p>React放当前更新到一个叫”transaction’的内部对象中。Transactions在跟踪声明周期钩子队列方面很有用，当前DOM嵌套错误警告，任何特定的全局更新。Transactions也确保React在更新后清空一切。例如，被React DOM提供的事务类将在任何更新后，重新存储输入的东西。</p>\n</li>\n</ul>\n<h2 id="跳着看代码"><a href="#%E8%B7%B3%E7%9D%80%E7%9C%8B%E4%BB%A3%E7%A0%81" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>跳着看代码</h2>\n<ul>\n<li>\n<p><a href="https://github.com/facebook/react/blob/83381c1673d14cd16cf747e34c945291e5518a86/src/renderers/dom/client/ReactMount.js">ReactMount</a>处可以发现本章节中提到的mountTree和unmountTree函数。它负责装载和卸载顶级类。<a href="https://github.com/facebook/react/blob/83381c1673d14cd16cf747e34c945291e5518a86/src/renderers/native/ReactNativeMount.js">ReactNativeMount</a>完成了React Native中同样的功能。</p>\n</li>\n<li>\n<p><a href="https://github.com/facebook/react/blob/83381c1673d14cd16cf747e34c945291e5518a86/src/renderers/dom/shared/ReactDOMComponent.js">ReactDOMComponent</a>是类同玉本章节中提到的DOMComponent。它完成了供React DOM渲染器使用的宿主组件类。<a href="https://github.com/facebook/react/blob/83381c1673d14cd16cf747e34c945291e5518a86/src/renderers/native/ReactNativeBaseComponent.js">ReactNativeBaseComponent</a>完成了React Native中同样的功能。</p>\n</li>\n<li>\n<p><a href="https://github.com/facebook/react/blob/83381c1673d14cd16cf747e34c945291e5518a86/src/renderers/shared/stack/reconciler/ReactCompositeComponent.js">ReactCompositeComponent</a>是等价于本章节中的CompositeComponent组件。它处理用户定义的组件并维护他们的状态。</p>\n</li>\n<li>\n<p><a href="https://github.com/facebook/react/blob/83381c1673d14cd16cf747e34c945291e5518a86/src/renderers/shared/stack/reconciler/instantiateReactComponent.js">instantiateReactComponent</a>负责为元素选择正确的正确的内部实例来初始化。它等同于本章节中的instantiateComponent。</p>\n</li>\n<li>\n<p><a href="https://github.com/facebook/react/blob/83381c1673d14cd16cf747e34c945291e5518a86/src/renderers/shared/stack/reconciler/ReactReconciler.js">ReactReconciler</a> 是mountComponent,receiveComponent和unmountComponent方法的一个封装。它是内部实例背后的完成，但也包括一些辅助内部实例完成的一些代码。</p>\n</li>\n<li>\n<p><a href="https://github.com/facebook/react/blob/83381c1673d14cd16cf747e34c945291e5518a86/src/renderers/shared/stack/reconciler/ReactChildReconciler.js">ReactChildReconciler</a>实现了根据key来进行装载，更新，卸载的逻辑。</p>\n</li>\n<li>\n<p><a href="https://github.com/facebook/react/blob/83381c1673d14cd16cf747e34c945291e5518a86/src/renderers/shared/stack/reconciler/ReactMultiChild.js">ReactMultiChild</a>通过渲染器实来对子元素进行插入，删除和移动的操作队列的处理</p>\n</li>\n<li>\n<p>由于遗留原因mount,receive,unmount方法在React代码库中被称作mountComponent,receiveComponent和unmountComponent,并且他们也接受元素。</p>\n</li>\n<li>\n<p>在内部实例的属性像underscore一样带有前置下划线。在整个代码库公开部分，他们被认为是只读的。</p>\n</li>\n</ul>\n<h2 id="将来的方向"><a href="#%E5%B0%86%E6%9D%A5%E7%9A%84%E6%96%B9%E5%90%91" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>将来的方向</h2>\n<p>栈识别算法有其内在的局限性比如其是同步的,不能中断当前操作,也不能将操作分块。新的Fiber识别算法还在开发当中，其架构和栈识别算法完全不同。将来，我们倾向用它取代栈识别算法，但是在那一刻到来前还有许多工作要做。</p>\n<h2 id="下一步"><a href="#%E4%B8%8B%E4%B8%80%E6%AD%A5" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>下一步</h2>\n<p>读下一章节来了解我们在开发React时的理念。</p>',
frontmatter:{title:"实现说明",next:"design-principles.html",prev:"codebase-overview.html"},fields:{path:"contributing/implementation-notes.md"}}},pathContext:{slug:"contributing/implementation-notes.html"}}}});
//# sourceMappingURL=path---contributing-implementation-notes-html-a0640047b80020fe02c5.js.map